def model_cnn(): 

    model = Sequential()
	
    # Convolutional + Pooling Layers
    model.add(Conv2D(8, kernel_size=(3,3), padding='same', activation='relu', input_shape=(pic_size,pic_size,1)))
    model.add(MaxPool2D(pool_size=(2,2),strides=2))
    model.add(Dropout(0.2))
    model.add(Conv2D(16, kernel_size=(3,3), activation='relu'))
    model.add(MaxPool2D(pool_size=(2,2),strides=2))
    model.add(Dropout(0.2))
    model.add(Conv2D(32, kernel_size=(3,3), activation='relu'))
    model.add(MaxPool2D(pool_size=(2,2),strides=2))
    model.add(Dropout(0.2))
    # Flatten Layer
    model.add(Flatten())
    # Dense Layers
    model.add(Dense(256, activation='relu'))
    model.add(Dropout(0.25))
    model.add(Dense(128, activation='relu'))
    model.add(Dropout(0.25))
    # Output layer
    model.add(Dense(3, activation='softmax'))
    
    # Compile the model
    model.compile(optimizer=Adam(learning_rate=1e-3), metrics=['accuracy'], loss='categorical_crossentropy')
    model.summary()
    
    return model